apiVersion: apps/v1
kind: Deployment
metadata:
  generation: 1
  name: grafana
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: grafana
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: grafana
    spec:
      automountServiceAccountToken: true
      containers:
#      - env:
#        - name: METHOD
#          value: WATCH
#        - name: LABEL
#          value: grafana_datasource
#        - name: FOLDER
#          value: /etc/grafana/provisioning/datasources
#        - name: RESOURCE
#          value: both
#        - name: REQ_USERNAME
#          valueFrom:
#            secretKeyRef:
#              key: admin-user
#              name: grafana
#        - name: REQ_PASSWORD
#          valueFrom:
#            secretKeyRef:
#              key: admin-password
#              name: grafana
#        - name: REQ_URL
#          value: http://localhost:3000/api/admin/provisioning/datasources/reload
#        - name: REQ_METHOD
#          value: POST
#        image: quay.io/kiwigrid/k8s-sidecar:1.24.3
#        imagePullPolicy: IfNotPresent
#        name: grafana-sc-datasources
#        resources: {}
#        securityContext:
#          allowPrivilegeEscalation: false
#          capabilities:
#            drop:
#            - ALL
#          seccompProfile:
#            type: RuntimeDefault
#        terminationMessagePath: /dev/termination-log
#        terminationMessagePolicy: File
#        volumeMounts:
#        - mountPath: /etc/grafana/provisioning/datasources
#          name: sc-datasources-volume
      - env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: admin-user
              name: grafana
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: admin-password
              name: grafana
        - name: GF_PATHS_DATA
          value: /var/lib/grafana/
        - name: GF_PATHS_LOGS
          value: /var/log/grafana
        - name: GF_PATHS_PLUGINS
          value: /var/lib/grafana/plugins
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        image: "{{ str(images.grafana) }}"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: grafana
          protocol: TCP
        - containerPort: 9094
          name: gossip-tcp
          protocol: TCP
        - containerPort: 9094
          name: gossip-udp
          protocol: UDP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/grafana/grafana.ini
          name: config
          subPath: grafana.ini
        - mountPath: /var/lib/grafana
          name: storage
        - mountPath: /etc/grafana/provisioning/datasources/prometheus.yaml
          name: config
          subPath: prometheus.yaml
        - mountPath: /etc/grafana/provisioning/dashboards/dashboards-conf.yaml
          name: config
          subPath: dashboards-conf.yaml
        - mountPath: /var/lib/grafana/dashboards
          name: grafana-dashboards
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      serviceAccount: grafana
      serviceAccountName: grafana
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: grafana
        name: config
      - emptyDir: {}
        name: storage
      - configMap:
          defaultMode: 420
          name: grafana-dashboards
        name: grafana-dashboards
